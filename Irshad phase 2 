# -*- coding: utf-8 -*-
"""Cracking the market code with AI-driven stock price prediction using time series analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CrJSKDzq883My4A0OBthItmyVUS-jCFD
"""

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error
import yfinance as yf

# Step 2: Load Stock Data
stock_data = yf.download('AAPL', start='2015-01-01', end='2024-01-01')
data = stock_data['Close'].values.reshape(-1, 1)

# Step 3: Preprocess Data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Create sequences
def create_dataset(data, time_step=60):
    X, y = [], []
        for i in range(time_step, len(data)):
                X.append(data[i-time_step:i])
                        y.append(data[i])
                            return np.array(X), np.array(y)

                            X, y = create_dataset(scaled_data)
                            X = X.reshape((X.shape[0], X.shape[1], 1))

                            # Step 4: Build LSTM Model
                            model = Sequential()
                            model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
                            model.add(LSTM(units=50))
                            model.add(Dense(1))
                            model.compile(optimizer='adam', loss='mean_squared_error')

                            # Step 5: Train Model
                            model.fit(X, y, epochs=10, batch_size=32)

                            # Step 6: Make Predictions
                            predicted = model.predict(X)
                            predicted = scaler.inverse_transform(predicted)
                            actual = scaler.inverse_transform(y)

                            # Step 7: Evaluate
                            mse = mean_squared_error(actual, predicted)
                            print(f'Mean Squared Error: {mse}')

                            # Step 8: Plot Results
                            plt.plot(actual, label='Actual Price')
                            plt.plot(predicted, label='Predicted Price')
                            plt.legend()
                            plt.title('Stock Price Prediction')
                            plt.show()